// <auto-generated />
using System;
using CarFleetMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarFleetMS.Data.Migrations
{
    [DbContext(typeof(CarFleetMSContext))]
    [Migration("20200129201903_InstitutioFixed")]
    partial class InstitutioFixed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarFleetMS.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApartmentNumber");

                    b.Property<string>("BuildingNumber");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int?>("InstitutionId");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.HasKey("AddressId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CarFleetMS.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("CarFleetMS.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonCompanyId");

                    b.HasKey("DriverId");

                    b.HasIndex("PersonCompanyId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("CarFleetMS.Models.Ensurance", b =>
                {
                    b.Property<int>("EnsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ACAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("EnsuranceNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NameOfTheCompany")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("OCAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PersonCompanyId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("VehicleId");

                    b.HasKey("EnsuranceId");

                    b.HasIndex("PersonCompanyId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Ensurance");
                });

            modelBuilder.Entity("CarFleetMS.Models.FuelType", b =>
                {
                    b.Property<int>("FuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("FuelTypeId");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("CarFleetMS.Models.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<string>("Name");

                    b.HasKey("InstitutionId");

                    b.HasIndex("AddressId");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("CarFleetMS.Models.Invoice", b =>
                {
                    b.Property<int>("FuelInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("VehicleId");

                    b.HasKey("FuelInvoiceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("CarFleetMS.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("CarFleetMS.Models.PersonCompany", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Email");

                    b.Property<bool>("IsPerson");

                    b.Property<string>("NIP")
                        .HasColumnName("REGON");

                    b.Property<string>("Name");

                    b.Property<string>("Pesel")
                        .HasColumnName("PESEL");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SecondName");

                    b.Property<string>("Surname");

                    b.HasKey("PersonId");

                    b.HasIndex("AddressId");

                    b.ToTable("PersonCompany");
                });

            modelBuilder.Entity("CarFleetMS.Models.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .IsRequired();

                    b.Property<int>("VehicleId");

                    b.HasKey("RepairId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("CarFleetMS.Models.TechnicalExamination", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfExam")
                        .HasColumnType("date");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("date");

                    b.Property<int>("VehicleId");

                    b.HasKey("ServiceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("TechnicalExamination");
                });

            modelBuilder.Entity("CarFleetMS.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AxlesNumber");

                    b.Property<string>("CardNumber");

                    b.Property<DateTime>("DateOfFirstRegistration")
                        .HasColumnType("date");

                    b.Property<double>("EngineCapacity");

                    b.Property<int>("FuelTypeId");

                    b.Property<int>("HolderId");

                    b.Property<int>("InstitutionId");

                    b.Property<double>("MaxAxleLoad");

                    b.Property<int>("MaxCapacity");

                    b.Property<double>("MaxNetPowerOfTheEngine");

                    b.Property<int>("MaxTrailerWeightWithBrake");

                    b.Property<int>("MaxTrailerWeightWithoutBrake");

                    b.Property<int>("MaxVehicleMass");

                    b.Property<int>("ModelId");

                    b.Property<int>("OwnerId");

                    b.Property<int>("PermissibleGrossVehicleWeight");

                    b.Property<int>("PermissibleTotalWeightOfTheVehicleCombination");

                    b.Property<int>("PowerToWeightRatio");

                    b.Property<string>("Purpose");

                    b.Property<DateTime>("RegistrationEndDate")
                        .HasColumnType("date");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<DateTime>("RegistrationReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("SeatsNumber");

                    b.Property<int?>("StandingPositionsNumber");

                    b.Property<int>("VehicleCategoryId");

                    b.Property<int>("VehicleKindId");

                    b.Property<int>("VehicleMass");

                    b.Property<string>("VehicleTypeApprovalCertificateNumber")
                        .HasMaxLength(20);

                    b.Property<int>("VehicleTypeId");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnName("VIN")
                        .HasMaxLength(17);

                    b.Property<int>("YearOfProduction");

                    b.HasKey("VehicleId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("HolderId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleKindId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("CarFleetMS.Models.VehicleAnnotations", b =>
                {
                    b.Property<int>("VehicleAnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("VehicleId");

                    b.HasKey("VehicleAnnotationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAnnotations");
                });

            modelBuilder.Entity("CarFleetMS.Models.VehicleCategory", b =>
                {
                    b.Property<int>("VehicleCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("VehicleCategoryId");

                    b.ToTable("VehicleCategory");
                });

            modelBuilder.Entity("CarFleetMS.Models.VehicleDriver", b =>
                {
                    b.Property<int>("VehicleDriverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DriverId");

                    b.Property<int>("VehicleId");

                    b.HasKey("VehicleDriverId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Vehicle_Driver");
                });

            modelBuilder.Entity("CarFleetMS.Models.VehicleKind", b =>
                {
                    b.Property<int>("VehicleKindId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("VehicleKindId");

                    b.ToTable("VehicleKind");
                });

            modelBuilder.Entity("CarFleetMS.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Variant");

                    b.Property<string>("Version");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CarFleetMS.Models.Address", b =>
                {
                    b.HasOne("CarFleetMS.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId");
                });

            modelBuilder.Entity("CarFleetMS.Models.Driver", b =>
                {
                    b.HasOne("CarFleetMS.Models.PersonCompany", "PersonCompany")
                        .WithMany("Driver")
                        .HasForeignKey("PersonCompanyId")
                        .HasConstraintName("Driver_Person_Company");
                });

            modelBuilder.Entity("CarFleetMS.Models.Ensurance", b =>
                {
                    b.HasOne("CarFleetMS.Models.PersonCompany", "PersonCompany")
                        .WithMany("Ensurance")
                        .HasForeignKey("PersonCompanyId")
                        .HasConstraintName("Ensurance_Person_Company");

                    b.HasOne("CarFleetMS.Models.Vehicle", "Vehicle")
                        .WithMany("Ensurance")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("VehicleEnsurance_Vehicle");
                });

            modelBuilder.Entity("CarFleetMS.Models.Institution", b =>
                {
                    b.HasOne("CarFleetMS.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarFleetMS.Models.Invoice", b =>
                {
                    b.HasOne("CarFleetMS.Models.Vehicle", "Vehicle")
                        .WithMany("Invoice")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FuelInvoice_Vehicle");
                });

            modelBuilder.Entity("CarFleetMS.Models.Model", b =>
                {
                    b.HasOne("CarFleetMS.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("Model_Brand");
                });

            modelBuilder.Entity("CarFleetMS.Models.PersonCompany", b =>
                {
                    b.HasOne("CarFleetMS.Models.Address", "Address")
                        .WithMany("PersonCompany")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("Person_Address");
                });

            modelBuilder.Entity("CarFleetMS.Models.Repair", b =>
                {
                    b.HasOne("CarFleetMS.Models.Vehicle", "Vehicle")
                        .WithMany("Repair")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("Repair_Vehicle");
                });

            modelBuilder.Entity("CarFleetMS.Models.TechnicalExamination", b =>
                {
                    b.HasOne("CarFleetMS.Models.Vehicle", "Vehicle")
                        .WithMany("TechnicalExamination")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("Service_Vehicle");
                });

            modelBuilder.Entity("CarFleetMS.Models.Vehicle", b =>
                {
                    b.HasOne("CarFleetMS.Models.FuelType", "FuelType")
                        .WithMany("Vehicle")
                        .HasForeignKey("FuelTypeId")
                        .HasConstraintName("Vehicle_FuelType");

                    b.HasOne("CarFleetMS.Models.PersonCompany", "Holder")
                        .WithMany("VehicleHolder")
                        .HasForeignKey("HolderId")
                        .HasConstraintName("VehicleOwner");

                    b.HasOne("CarFleetMS.Models.Institution", "Institution")
                        .WithMany("Vehicle")
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("VehicleInstitution");

                    b.HasOne("CarFleetMS.Models.Model", "Model")
                        .WithMany("Vehicle")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("Vehicle_Model");

                    b.HasOne("CarFleetMS.Models.PersonCompany", "Owner")
                        .WithMany("VehicleOwner")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("VehicleHolder");

                    b.HasOne("CarFleetMS.Models.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleCategoryId")
                        .HasConstraintName("Vehicle_VehicleCategory");

                    b.HasOne("CarFleetMS.Models.VehicleKind", "VehicleKind")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleKindId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarFleetMS.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("Vehicle_VehicleType");
                });

            modelBuilder.Entity("CarFleetMS.Models.VehicleAnnotations", b =>
                {
                    b.HasOne("CarFleetMS.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleAnnotations")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("AdditionalVehicleInfo_Vehicle");
                });

            modelBuilder.Entity("CarFleetMS.Models.VehicleDriver", b =>
                {
                    b.HasOne("CarFleetMS.Models.Driver", "Driver")
                        .WithMany("VehicleDriver")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("Vehicle_Driver_Driver");

                    b.HasOne("CarFleetMS.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleDriver")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("Vehicle_Driver_Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
